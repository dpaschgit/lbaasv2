openapi: 3.0.3
info:
  title: Load Balancing as a Service (LBaaS) API
  description: |
    This API provides Load Balancing as a Service (LBaaS) capabilities, including CRUD operations for Virtual IPs (VIPs), 
    entitlement verification through ServiceNow CMDB integration, and a standard output format for vendor-specific transformers.
  version: 1.0.0
  contact:
    name: LBaaS Team
    email: lbaas-support@example.com

servers:
  - url: 'https://lbaas-api.example.com/api/v1'
    description: Production server
  - url: 'http://localhost:8000/api/v1'
    description: Development server

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT token-based authentication

  schemas:
    Error:
      type: object
      properties:
        code:
          type: integer
          format: int32
          description: Error code
        message:
          type: string
          description: Error message
        details:
          type: string
          description: Detailed error information

    Monitor:
      type: object
      required:
        - type
        - port
      properties:
        type:
          type: string
          description: Type of health monitor (e.g., HTTP, TCP, ICMP, ECV)
          example: "HTTP"
        port:
          type: integer
          description: Port to use for the health monitor
          example: 8080
        send:
          type: string
          description: String to send for active health checks
          example: "GET /health HTTP/1.1"
        receive:
          type: string
          description: Expected string to receive for successful health check
          example: "200 OK"

    Persistence:
      type: object
      required:
        - type
        - timeout
      properties:
        type:
          type: string
          description: Type of session persistence (e.g., source_ip, cookie)
          example: "source_ip"
        timeout:
          type: integer
          description: Timeout for persistence record in seconds
          example: 300

    PoolMember:
      type: object
      required:
        - ip
        - port
      properties:
        ip:
          type: string
          description: IP address of the backend server
          example: "10.0.0.1"
        port:
          type: integer
          description: Port of the backend server
          example: 8080

    VipBase:
      type: object
      required:
        - vip_fqdn
        - app_id
        - environment
        - datacenter
        - primary_contact_email
        - pool
        - owner
        - port
        - protocol
      properties:
        vip_fqdn:
          type: string
          description: Fully Qualified Domain Name of the VIP
          example: "vip123.davelab.net"
        vip_ip:
          type: string
          description: IP address of the VIP (can be auto-assigned)
          example: "1.1.1.100"
        app_id:
          type: string
          description: Application identifier associated with this VIP
          example: "111111"
        environment:
          type: string
          description: Deployment environment (e.g., Dev, UAT, Prod)
          example: "Prod"
        datacenter:
          type: string
          description: Datacenter where the VIP is provisioned
          example: "LADC"
        primary_contact_email:
          type: string
          format: email
          description: Primary contact email for the VIP
          example: "user@example.com"
        secondary_contact_email:
          type: string
          format: email
          description: Secondary contact email for the VIP
          example: "alt@example.com"
        team_distribution_email:
          type: string
          format: email
          description: Team distribution email for the VIP
          example: "team@example.com"
        monitor:
          $ref: '#/components/schemas/Monitor'
        persistence:
          $ref: '#/components/schemas/Persistence'
        ssl_cert_name:
          type: string
          description: Name/reference to the SSL certificate
          example: "mycert.example.com"
        mtls_ca_cert_name:
          type: string
          description: Name/reference to the mTLS CA certificate
          example: "my-client-ca.pem"
        pool:
          type: array
          description: List of backend servers in the pool
          items:
            $ref: '#/components/schemas/PoolMember'
        owner:
          type: string
          description: Owner or creator of the VIP configuration
          example: "user1"
        port:
          type: integer
          description: Listening port for the VIP
          example: 443
        protocol:
          type: string
          description: Protocol for the VIP (e.g., TCP, HTTP, HTTPS)
          example: "HTTPS"
        lb_method:
          type: string
          description: Load balancing method
          example: "ROUND_ROBIN"

    VipCreate:
      allOf:
        - $ref: '#/components/schemas/VipBase'

    VipUpdate:
      type: object
      properties:
        vip_fqdn:
          type: string
          description: Fully Qualified Domain Name of the VIP
          example: "vip123.davelab.net"
        vip_ip:
          type: string
          description: IP address of the VIP
          example: "1.1.1.100"
        app_id:
          type: string
          description: Application identifier
          example: "111111"
        environment:
          type: string
          description: Deployment environment
          example: "Prod"
        datacenter:
          type: string
          description: Datacenter where the VIP is provisioned
          example: "LADC"
        primary_contact_email:
          type: string
          format: email
          description: Primary contact email
          example: "user@example.com"
        secondary_contact_email:
          type: string
          format: email
          description: Secondary contact email
          example: "alt@example.com"
        team_distribution_email:
          type: string
          format: email
          description: Team distribution email
          example: "team@example.com"
        monitor:
          $ref: '#/components/schemas/Monitor'
        persistence:
          $ref: '#/components/schemas/Persistence'
        ssl_cert_name:
          type: string
          description: SSL certificate name/reference
          example: "mycert.example.com"
        mtls_ca_cert_name:
          type: string
          description: mTLS CA certificate name/reference
          example: "my-client-ca.pem"
        pool:
          type: array
          description: List of backend servers
          items:
            $ref: '#/components/schemas/PoolMember'
        owner:
          type: string
          description: Owner or creator
          example: "user1"
        port:
          type: integer
          description: Listening port
          example: 443
        protocol:
          type: string
          description: Protocol for the VIP
          example: "HTTPS"
        lb_method:
          type: string
          description: Load balancing method
          example: "LEAST_CONNECTIONS"

    EntitlementVerification:
      type: object
      required:
        - server_ids
      properties:
        server_ids:
          type: array
          description: List of server IDs to verify entitlements for
          items:
            type: string
            example: "server123"

    EntitlementResult:
      type: object
      required:
        - server_id
        - entitled
      properties:
        server_id:
          type: string
          description: Server ID
          example: "server123"
        entitled:
          type: boolean
          description: Whether the user is entitled to this server
          example: true
        reason:
          type: string
          description: Reason for entitlement decision
          example: "User is a member of the application team"

    EntitlementResultList:
      type: array
      items:
        $ref: '#/components/schemas/EntitlementResult'

    UserEntitlements:
      type: object
      properties:
        user_id:
          type: string
          description: User ID
          example: "user123"
        entitled_servers:
          type: array
          description: List of servers the user is entitled to
          items:
            type: object
            properties:
              server_id:
                type: string
                description: Server ID
                example: "server123"
              server_name:
                type: string
                description: Server name
                example: "app-server-01"
              application:
                type: string
                description: Application the server belongs to
                example: "CRM"

    TransformerOutput:
      type: object
      description: Vendor-specific configuration in standard JSON format
      properties:
        vip_id:
          type: string
          description: VIP identifier
          example: "vip123"
        vendor:
          type: string
          description: Load balancer vendor
          example: "f5"
        configuration:
          type: object
          description: Vendor-specific configuration
          additionalProperties: true

    VendorInfo:
      type: object
      properties:
        name:
          type: string
          description: Vendor name
          example: "f5"
        display_name:
          type: string
          description: Display name
          example: "F5 BIG-IP"
        capabilities:
          type: array
          description: Supported capabilities
          items:
            type: string
            example: "ssl_offloading"

    VendorList:
      type: array
      items:
        $ref: '#/components/schemas/VendorInfo'

    PromotionOptions:
      type: object
      properties:
        override_environment_specific:
          type: boolean
          description: Whether to override environment-specific data
          example: false
        specific_overrides:
          type: object
          description: Specific fields to override during promotion
          additionalProperties: true

    PromotionResult:
      type: object
      properties:
        success:
          type: boolean
          description: Whether the promotion was successful
          example: true
        source_vip_id:
          type: string
          description: Source VIP ID
          example: "vip123"
        target_vip_id:
          type: string
          description: Target VIP ID
          example: "vip456"
        target_environment:
          type: string
          description: Target environment
          example: "Prod"
        modified_fields:
          type: array
          description: Fields that were modified during promotion
          items:
            type: string
            example: "ssl_cert_name"
        warnings:
          type: array
          description: Warnings during promotion
          items:
            type: string
            example: "Certificate validity changed"

security:
  - bearerAuth: []

paths:
  /vips:
    get:
      summary: List VIPs
      description: Lists all VIPs or filters by query parameters
      operationId: listVips
      parameters:
        - name: app_id
          in: query
          description: Filter by application ID
          schema:
            type: string
        - name: environment
          in: query
          description: Filter by environment
          schema:
            type: string
        - name: datacenter
          in: query
          description: Filter by datacenter
          schema:
            type: string
        - name: owner
          in: query
          description: Filter by owner
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/VipBase'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Create VIP
      description: Creates a new VIP configuration
      operationId: createVip
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VipCreate'
      responses:
        '201':
          description: VIP created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VipBase'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden - Entitlement verification failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /vips/{vip_id}:
    get:
      summary: Get VIP
      description: Retrieves a specific VIP configuration
      operationId: getVip
      parameters:
        - name: vip_id
          in: path
          description: VIP identifier
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VipBase'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: VIP not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      summary: Update VIP
      description: Updates an existing VIP configuration
      operationId: updateVip
      parameters:
        - name: vip_id
          in: path
          description: VIP identifier
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VipUpdate'
      responses:
        '200':
          description: VIP updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VipBase'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden - Entitlement verification failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: VIP not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Delete VIP
      description: Deletes a VIP configuration
      operationId: deleteVip
      parameters:
        - name: vip_id
          in: path
          description: VIP identifier
          required: true
          schema:
            type: string
      responses:
        '204':
          description: VIP deleted successfully
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: VIP not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /entitlements/verify:
    post:
      summary: Verify Entitlement
      description: Verifies user entitlements for specific servers
      operationId: verifyEntitlement
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EntitlementVerification'
      responses:
        '200':
          description: Entitlement verification result
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EntitlementResultList'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /entitlements/user:
    get:
      summary: Get User Entitlements
      description: Retrieves all servers a user has entitlements for
      operationId: getUserEntitlements
      responses:
        '200':
          description: User entitlements
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserEntitlements'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /transformers/{vip_id}/{vendor}:
    get:
      summary: Get Transformer Output
      description: Retrieves vendor-specific transformer output for a VIP
      operationId: getTransformerOutput
      parameters:
        - name: vip_id
          in: path
          description: VIP identifier
          required: true
          schema:
            type: string
        - name: vendor
          in: path
          description: Load balancer vendor
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Transformer output
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransformerOutput'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: VIP or vendor not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /transformers/vendors:
    get:
      summary: List Supported Vendors
      description: Lists all supported load balancer vendors
      operationId: listVendors
      responses:
        '200':
          description: List of vendors
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VendorList'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /promotion/{vip_id}/{target_environment}:
    post:
      summary: Promote VIP Configuration
      description: Promotes VIP configuration to target environment
      operationId: promoteVip
      parameters:
        - name: vip_id
          in: path
          description: VIP identifier
          required: true
          schema:
            type: string
        - name: target_environment
          in: path
          description: Target environment
          required: true
          schema:
            type: string
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PromotionOptions'
      responses:
        '200':
          description: Promotion result
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PromotionResult'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: VIP not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
